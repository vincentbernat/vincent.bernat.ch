{# nginx configuration to be included at the "server" level #}
{% macro domain(url) -%}
  {{ url.split("://")[- 1].split("/")[0] }}
{%- endmacro %}
{% macro csp() %}
default-src     'self' blob:;
script-src      'self' blob: {{ domain(media_url('js/')) }} 'sha256-Yv7kZY+BkmpZYTujeN0YNmI0uRKpS5CY7E4enn1TRL0=';
style-src       'self' 'unsafe-inline' data: {{ domain(media_url('css/')) }};
font-src        'self' {{ domain(media_url('fonts/')) }};
object-src      'self' {{ domain(media_url('images/')) }} {{ domain(media_url('files/')) }};
img-src         'self' data: {{ domain(media_url('images/')) }};
frame-src       {{ domain(media_url('images/')) }} {{ domain(media_url('files/')) }};
worker-src      blob:;
media-src       'self' blob: about: {{ domain(media_url('videos/')) }} {{ domain(media_url('images/')) }};
connect-src     'self' {{ domain(media_url('videos/')) }} comments.luffy.cx;
base-uri        'none';
frame-ancestors 'none';
form-action     duckduckgo.com;
{% endmacro %}

index         index.html;
error_page    404 {{ content_url('/en/404.html') }};
expires       6h;
add_header    "X-Content-Type-Options" "nosniff";
add_header    "Strict-Transport-Security" "max-age=31536000; includeSubDomains; preload";
add_header    "Content-Security-Policy" "{{ csp()|striptags }}";

location = /nginx.conf {
  return      404;
}

{# language selection, a more correct alternative would be:
   https://www.nginx.com/resources/wiki/modules/accept_language/ #}
{% for code, lang in languages %}
location /{{ code }} {
  error_page 404 {{ content_url('/' + code + '/404.html') }};
  try_files $uri.html $uri $uri/index.html =404;
}
location {{ content_url('/' + code + '/404.html') }} {
  internal;
  try_files $uri.html $uri;
}
{% endfor %}
location = / {
  access_log off;
  log_not_found off;
  set_from_accept_language $lang {% for code, lang in languages %}{{ code }}{% if not loop.last %} {% endif %}{% endfor %};
  add_header  Vary Accept-Language;
  add_header  "Strict-Transport-Security" "max-age=31536000";
  http2_push  /$lang;
  return 301  /$lang;
}

location / {
  try_files $uri.html $uri $uri/index.html =404;
}

{# redirections #}
location = /favicon.ico {
  access_log off;
  return 301 {{ media_url('images/favicon.ico') }};
}
location = /favicon.png {
  access_log off;
  return 301 {{ media_url('images/favicon.png') }};
}
location = /apple-touch-icon.png {
  access_log off;
  return 301 {{ media_url('images/favicon.png') }};
}
location ~ ^/apple-touch-icon-\d+x\d+.png$ {
  access_log off;
  return 301 {{ media_url('images/favicon.png') }};
}
location = /apple-touch-icon-precomposed.png {
  access_log off;
  log_not_found off;
  return 404;
}
location ~ ^(?<canonical>.+)/(?:index\.html)?$ {
  access_log off;
  log_not_found off;
  http2_push $canonical;
  return 301 $canonical;
}
location ~ ^(?<canonical>.*)\.html$ {
  access_log off;
  log_not_found off;
  http2_push $canonical;
  return 301 $canonical;
}

{% for res in resource.node.walk_resources() %}
{# handle exceptions #}
{% if res.meta.nolog or res.meta.mime %}
location = {{ content_url(res.url) }} {
{% if res.meta.nolog %}
  access_log off;
  log_not_found off;
{% endif %}
{% if res.meta.mime %}
  types { }
  default_type {{ res.meta.mime }};
{% endif %}
  try_files $uri.html $uri $uri/index.html;
}
{% endif %}
{% endfor %}

{# Misc #}
location /ip {
  default_type text/plain;
  expires epoch;
  return 200 $remote_addr;
}
